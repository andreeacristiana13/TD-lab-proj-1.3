/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};


/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, UMINUS, TIMES, LPAREN, RPAREN, ELSE, VOID, COUT, CIN, DOUBLEQUOTE;
terminal Integer    NUMBER;        
// our scanner provides numbers as integers -- this is the INT_LITERAL
terminal 			LSQUARE, RSQUARE, LBRACKET, RBRACKET, COMMA, EQUAL, NOT, TRUE, FALSE, WHILE, IF;
terminal			ANDAND, OROR, EQUALEQUAL, DIFFERENT, BIGGER, LESS, LESSEQUAL, BIGGEREQUAL, RETURN;
// DIFFERENT refers to NOTEQUAL
terminal 			LSHIFT, RSHIFT, ID, READ, WRITE;
terminal String		STRING_LITERAL;
terminal Integer 	INT;
terminal Boolean 	BOOL;
terminal DIV;

/* Non terminals */
/*
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions
*/
non terminal program;
non terminal varDecl;
non terminal type;
non terminal fnDecl;
non terminal parameters;
non terminal formalsList;
non terminal formalDecl;
non terminal block;
non terminal declList;
non terminal stmtList;
non terminal stmt;
non terminal exp;
non terminal atom;
non terminal fnCallExpr;
non terminal fnCallStmt;
non terminal actualList;
non terminal subscriptExpr;
non terminal id;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;



/* The grammar rules */

program
::= program:p varDecl:vd				{:	System.out.println("Program with variable declaration.");	:}                      
 | program:p fnDecl:fd					{:	System.out.println("Program with function declaration.");	:}						
 | /* empty */
 ; 
 
varDecl
 ::= type:t id:identifier SEMI						{:	System.out.println("Variable declaration with type and id ending with ; ");		:}           		
 | type:t id:identifier LSQUARE NUMBER RSQUARE SEMI	{:	System.out.println("Variable declaration with type and id ending with [nr]; ");	:} 
 ;
 
type
 ::= INT								{:	System.out.println("Type INT.");	:} 
 | BOOL 								{:	System.out.println("Type BOOL.");	:} 
 | VOID									{:	System.out.println("Type VOID.");	:}  
 ;
 
fnDecl
 ::= type:t id:identifier parameters:param block:blk	{:	System.out.println("Function declaration.");:} 
 ;
 
parameters
 ::= LPAREN RPAREN						{:	System.out.println("Parameters []");						:}         	
 | LPAREN formalsList:fl RPAREN			{:	System.out.println("Parameters [formal list]");				:}  
 ;

formalsList
 ::= formalDecl:fd						{:	System.out.println("Formal list is formal declaration");	:}  			
 | formalsList:fl COMMA formalDecl:fd	{:	System.out.println("Formal list , formal declaration");		:} 
 ;

formalDecl
 ::= type:t id:identifier				{:	System.out.println("Formal declaration with type id");		:} 
 ;

block
 ::= LBRACKET declList:dl stmtList:sl RBRACKET	{:	System.out.println("Block with {declaration list statement list}");	:}  
 ;
 
declList
 ::= declList:dl varDecl:vd				{:	System.out.println("Declaration list variable declaration");				:}  					
 | /* empty */
 ;
 
stmtList
 ::= stmtList:sl stmt:s					{:	System.out.println("Statement list statement");				:}  						
 | /* empty */
 ;
 
stmt
 ::= CIN READ id:identifier SEMI			{:	System.out.println("Statement says cin read identifier ;");						:}  					
 | CIN READ id:identifier LSQUARE exp:e RSQUARE SEMI {:	System.out.println("Statement says cin read identifier [exp] ;");		:} 
 | COUT WRITE exp:e SEMI					{:	System.out.println("Statement says cout write exp ;");							:}  						
 | subscriptExpr:se EQUAL exp:e SEMI 		{:	System.out.println("Statement says subscriptexpression = expression ;");		:} 
 | id:identifier EQUAL exp:e SEMI 			{:	System.out.println("Statement says identifier = expression ;");					:} 
 | IF LPAREN exp:e RPAREN block:b 		{:	System.out.println("Statement says if (expression) block");						:} 	
 | IF LPAREN exp:e RPAREN block:b ELSE block:b {:	System.out.println("Statement says if (expression) block else block");	:} 
 | WHILE LPAREN exp:e RPAREN block:b 		{:	System.out.println("Statement says while (expression) block");					:} 
 | RETURN exp:e SEMI						{:	System.out.println("Statement says return expression ;");						:}  						
 | RETURN SEMI 								{:	System.out.println("Statement says return ;");									:} 
 | fnCallStmt:fcs SEMI 						{:	System.out.println("Statement says function call statement ;");					:} 
 ;
 

exp
 ::= exp:e1 PLUS exp:e2						{:	System.out.println("expression + expression");					:}  	
 | exp:e1 MINUS exp:e2						{:	System.out.println("expression - expression");					:}  	
 | exp:e1 TIMES exp:e2						{:	System.out.println("expression x expression");					:} 
 | exp:e1 DIV exp:e2 						{:	System.out.println("expression div expression");				:} 
 | DIFFERENT exp:e 							{:	System.out.println("!= expression");							:} 
 | exp:e1 ANDAND exp:e2 					{:	System.out.println("expression and epression");					:} 
 | exp:e1 OROR exp:e2 						{:	System.out.println("expression or expression");					:} 
 | exp:e1 EQUALEQUAL exp:e2					{:	System.out.println("expression == expression");					:} 
 | exp:e DIFFERENT							{:	System.out.println("expression !=");							:} 
 | exp:e1 BIGGER exp:e2						{:	System.out.println("expression > expression");					:} 
 | exp:e1 LESS exp:e2						{:	System.out.println("expression < expression");					:} 
 | exp:e1 LESSEQUAL exp:e2 					{:	System.out.println("expression <= expression");					:} 
 | exp:e1 BIGGEREQUAL exp:e2				{:	System.out.println("expression >= expression");					:} 
 | MINUS atom:a 							{:	System.out.println("- atom");									:} 
 | atom:a 									{:	System.out.println("atom");										:} 
 ;
 
atom
 ::= NUMBER 								{:	System.out.println("atom number");								:} 		
 | STRING_LITERAL 							{:	System.out.println("atom string literal");						:} 
 | TRUE										{:	System.out.println("atom true");								:} 
 | FALSE									{:	System.out.println("atom false");								:} 
 | LPAREN exp:e RPAREN 						{:	System.out.println("atom (expression)");						:} 
 | fnCallExpr:fce 							{:	System.out.println("atom function call expresasion");			:} 
 | subscriptExpr:se 						{:	System.out.println("atom subscript expression");				:} 
 | id:identifier 							{:	System.out.println("atom identifier");							:} 
 ;
 
fnCallExpr
 ::= id:identifier LPAREN RPAREN			{:	System.out.println("Function call with identifier ()");				:} 
 | id:identifier LPAREN actualList:al RPAREN {:	System.out.println("Function call with identifier (actual list)");	:} 
 ;
 
fnCallStmt
 ::= id:identifier LPAREN RPAREN			{:	System.out.println("Fct call statement identifier ()");			:} 
 | id LPAREN actualList RPAREN				{:	System.out.println("Fct call statement (actual list)");			:} 
 ;
 
actualList
 ::= exp:e									{:	System.out.println("expression");								:} 
 | actualList:al COMMA exp:e				{:	System.out.println("actual list ; expression");					:} 
 ;
 
subscriptExpr
 ::= id:identifier LSQUARE exp:e RSQUARE	{:	System.out.println("identifier (expression)");	:} 
 ;
 
id
 ::= ID 									{:	System.out.println("identifier");				:} 
 ;


/*
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e); :}
            | expr:e SEMI                   {: System.out.println(e); :}
            ;
            
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;        :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;        :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;        :}
             | MINUS expr:e                 {: RESULT = -e;           :}
             %prec UMINUS
             | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
             | NUMBER:n	                     {: RESULT = n;           :}
             ;
*/    